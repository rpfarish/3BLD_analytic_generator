times = [
    "DNF: D2 R2 L U B2 R' B R F2 D2 R2 F2 L U2 L2 D2 L' D' B' Uw2",
    "1: +10.59 (10.59)",
    "2: +11.00 (21.59)",
    "",
    "25.03: L D2 B' L2 F D2 F R2 B' D L' F' R2 F' D' U' B' R2 U' Fw'",
    "1: +9.25 (9.25)",
    "2: +15.79 (25.03)",
    "",
    "DNF: U F2 U B2 U' R B2 F D' B' F2 R' D2 L D' L2 D' Rw Uw",
    "1: +10.34 (10.34)",
    "2: +18.13 (28.47)",
    "",
    "19.08: D2 R' B2 U2 L2 R U2 B2 D2 B2 R2 D' F R2 D' U2 L2 R' D2 U Rw Uw2",
    "1: +8.52 (8.52)",
    "2: +10.56 (19.08)",
    "",
    "DNF: D F2 R U2 L U2 R' B2 R' U2 B U' B D2 B2 D2 L2 F Rw' Uw",
    "1: +8.33 (8.33)",
    "2: +14.45 (22.78)",
    "",
    "DNF: D2 F' B2 U' F L' U2 D2 F L D' L2 B2 D L2 U' F2 R2 F Rw2 Uw",
    "1: +8.43 (8.43)",
    "2: +18.12 (26.55)",
    "",
    "20.91: D B2 D2 U2 B L2 F D2 R2 F R2 U L' U2 L R2 F' L' R' U' Rw Uw2",
    "1: +7.72 (7.72)",
    "2: +13.19 (20.91)",
    "",
    "24.89: D2 B2 U F R F2 D2 L D2 L' F2 L2 D B R2 B U2 L R' Fw' Uw",
    "1: +9.12 (9.12)",
    "2: +15.77 (24.89)",
    "",
    "DNF: R' B L' B D2 R U D2 F' L U' F2 U' R2 B2 U F2 U2 D2 Fw",
    "1: +8.34 (8.34)",
    "2: +29.21 (37.55)",
    "",
    "DNF: F2 B2 D L B R' D2 L R2 B D2 B' U2 B2 D2 L2 U R2 F' Rw2 Uw'",
    "1: +8.37 (8.37)",
    "2: +17.61 (25.98)",
    "",
    "22.38: R2 F D2 F' R2 B' L2 U2 L' F D' U2 L' U2 L' R2 U2 R' D' Rw' Uw",
    "1: +9.90 (9.90)",
    "2: +12.48 (22.38)",
    "",
    "DNF: U2 L2 R F2 D2 L2 B2 U2 B D' L' B R2 U2 L2 F' D U' R' Fw Uw2",
    "1: +10.46 (10.46)",
    "2: +31.86 (42.32)",
    "",
    "21.85: D' B' L F B2 U2 D F U2 B2 D R2 B2 L2 B L2 U2 F2 R2 Uw2",
    "1: +8.94 (8.94)",
    "2: +12.91 (21.85)",
    "",
    "21.86: D' F2 R2 B2 F2 D L D' B2 D F' U R' D L U B D2 Fw' Uw",
    "1: +9.52 (9.52)",
    "2: +12.34 (21.86)",
    "",
    "23.24: U2 F' B' R2 U' F' L D F' R B' R' U2 F2 L2 U2 R2 D2 Rw",
    "1: +9.58 (9.58)",
    "2: +13.66 (23.24)",
    "",
    "DNF: R2 U2 B2 F2 L2 D' F2 U' B2 D2 R2 F' L B R2 U' R' U B Uw2",
    "1: +10.38 (10.38)",
    "2: +20.24 (30.62)",
    "",
    "21.50: B2 L2 U' F D L2 B L U2 B' U D F2 L2 D F2 B2 L2 D' Rw2 Uw'",
    "1: +9.18 (9.18)",
    "2: +12.32 (21.50)",
    "",
    "DNF: U2 D2 F U' R' U' L B2 U' F' D' B2 L2 B2 R2 B D2 F R2 Fw Uw",
    "1: +13.24 (13.24)",
    "2: +28.88 (42.12)",
    "",
    "22.22: R B D2 U2 L2 B2 D2 R' U2 B2 L' D2 F2 B D' F' D' F2 R' U2 Fw' Uw'",
    "1: +9.27 (9.27)",
    "2: +12.95 (22.21)",
    "",
    "22.13: F' D B2 R2 D U B2 R2 B2 U B L2 D2 F2 L' D2 F' L U2 Rw",
    "1: +7.78 (7.78)",
    "2: +14.34 (22.12)",
    "",
    "DNF: L' B' R2 U' B2 R2 B D2 U2 F' U2 F R U' B2 D R D R Fw' Uw'",
    "1: +9.06 (9.06)",
    "2: +26.28 (35.34)",
    "",
    "DNF: B R2 B U L B2 D' R' U' R2 L2 B' D2 R2 F' L2 R' U' Rw",
    "1: +8.89 (8.89)",
    "2: +25.42 (34.31)",
    "",
    "21.07: U L' F U' F' U2 D' B R' F' R U2 F B2 L2 F R2 L2 F Uw",
    "1: +9.03 (9.03)",
    "2: +12.04 (21.07)",
    "",
    "21.77: L2 B' U B D2 F' U2 F' L2 D2 L' R' U' L2 R' B F2 D2 Rw2 Uw'",
    "1: +9.97 (9.97)",
    "2: +11.80 (21.77)",
    "",
    "DNF: B2 R2 D' R U B' R L2 F2 L2 F D2 L2 U2 F R B L F Rw Uw",
    "1: +9.48 (9.48)",
    "2: +14.56 (24.04)",
    "",
    "21.73: L R2 D2 F2 L' F2 D2 B R' D2 F2 L D2 F2 U' R U B Rw' Uw2",
    "1: +10.48 (10.48)",
    "2: +11.25 (21.73)",
    "",
    "DNF: U2 R2 F2 D U B2 U2 F2 D F R' B' R' D B L' F U' Fw' Uw'",
    "1: +11.47 (11.47)",
    "2: +0.22 (11.69)",
    "",
    "24.18: F' R U' R D F B' U2 D2 R2 D2 R' L2 D2 B2 U' R2 B' Rw Uw'",
    "1: +9.88 (9.88)",
    "2: +14.30 (24.18)",
    "",
    "DNF: F2 D L2 D2 L2 B' R' U2 F' D2 L2 U R2 D F2 U L2 D B' Rw2 Uw'",
    "1: +9.25 (9.25)",
    "2: +13.25 (22.51)",
    "",
    "27.25: R' F2 U2 D' F D L U2 R L B L2 F2 U2 F' D2 B D2 Rw'",
    "1: +9.40 (9.40)",
    "2: +17.85 (27.25)",
    "",
]


def chunker(seq, size):
    return (seq[pos : pos + size] for pos in range(0, len(seq), size))


times_dict = {}
j = 1
for i in range(0, len(times), 4):

    memo, execution = times[i + 1][:-1].split("(")[-1], times[i + 2][:-1].split("(")[-1]
    if times[i].startswith("DNF"):

        group = [
            times[i].replace("DNF", f"DNF({round(float(memo) + float(execution), 2)})"),
            memo,
            execution,
        ]
        # , times[i].replace("DNF", f"DNF({round(float(memo)+ float(execution), 2)})"))
        print(f"DNF({round(float(memo) + float(execution), 2)})")
    else:
        group = [times[i], memo, execution]
        print(times[i].split(":")[0])  # , times[i])

    times_dict[j] = group
    j += 1

# pprint(times_dict)
